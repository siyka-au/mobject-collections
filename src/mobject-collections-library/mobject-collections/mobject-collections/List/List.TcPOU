<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.6">
  <POU Name="List" Id="{5f727a59-3f60-413e-a723-98d5c51de522}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
{attribute 'hide_all_locals'}
FUNCTION_BLOCK PUBLIC List EXTENDS Disposable IMPLEMENTS I_List
VAR
	memoryManager : FB_DynMem_Manager2;
	buffer : FB_DynMem_Buffer(ipMemMan := memoryManager);
	pArrayOfListNodes : POINTER TO I_ListNode;
	arrayCapacity : DINT;
	itemCount : DINT;
	eventEmitter : EventEmitter;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Destructor" Id="{428ff6cc-3d52-4520-a42c-cfd0360501aa}" />
    <Folder Name="Private" Id="{35b45465-f64b-0073-332a-458d062da7fa}" />
    <Method Name="AddItem" Id="{8e6a4535-bd9d-47d2-b35e-8d08cd07bd6b}">
      <Declaration><![CDATA[METHOD PUBLIC AddItem
VAR_INPUT
	Item : ANY;
END_VAR
VAR
	node : I_ListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[node := CreateNewNode(Item);
IF AddNodeLast(node) THEN
	EmitChangedEvent();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNodeAt" Id="{8e1d640d-6d28-09f6-0c77-bd824365909e}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AddNodeAt : BOOL
VAR_INPUT
	Index : DINT;
	Node : I_ListNode;
END_VAR
VAR
	i : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index = itemCount THEN
	IF AddNodeLast(Node) THEN
		AddNodeAt := TRUE;
	END_IF
	RETURN;
END_IF

IF Index > itemCount - 1 THEN
	RETURN;
END_IF

IF itemCount + 1 > arrayCapacity THEN
	IF NOT Grow() THEN
		RETURN;
	END_IF
END_IF

IF IsBufferPointerValid THEN
	//Move all excisting nodes up
	FOR i := itemCount - 1 TO Index BY -1 DO
		pArrayOfListNodes[i + 1] := pArrayOfListNodes[i];
		pArrayOfListNodes[i] := 0;
	END_FOR
	
	pArrayOfListNodes[Index] := Node;
	itemCount := itemCount + 1;
	
	AddNodeAt := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddNodeLast" Id="{c28185a7-34d4-0f68-2f69-9cee437d2b60}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE AddNodeLast : BOOL
VAR_INPUT
	Node : I_ListNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF itemCount = arrayCapacity THEN
    IF NOT Grow() THEN
		RETURN;
	END_IF
END_IF

IF IsBufferPointerValid THEN
	pArrayOfListNodes[itemCount] := Node;
	itemCount := itemCount + 1;
	
	AddNodeLast := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Capacity" Id="{af2f7378-65f0-0b48-29f7-a9e9a9c700b2}">
      <Declaration><![CDATA[PROPERTY PUBLIC Capacity : DINT]]></Declaration>
      <Get Name="Get" Id="{2cebb8dd-a28f-012f-1fd8-0d8135f72705}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Capacity := arrayCapacity;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clear" Id="{a70304cc-2b88-09f1-21d8-5b864a9bd98c}">
      <Declaration><![CDATA[METHOD Clear
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsEmpty THEN
	RETURN;
END_IF

RemoveAllNodes();
EmitChangedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{4055a9e7-ffe0-0141-3905-2f987f97e306}">
      <Declaration><![CDATA[METHOD Contains : BOOL
VAR_INPUT
	Item : ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsEmpty THEN
	RETURN;
END_IF

Contains := GetIndexOf(Item) > -1;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{d5fd8914-1561-416e-826e-5f073f26b7b3}">
      <Declaration><![CDATA[PROPERTY PUBLIC Count : DINT]]></Declaration>
      <Get Name="Get" Id="{498039a9-0053-4f44-9dbb-95370bc5d975}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Count := itemCount;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CreateNewNode" Id="{abcc4378-eb96-02b7-3f7a-a41ea820de27}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateNewNode : I_ListNode
VAR_INPUT
	Value : ANY;
END_VAR
VAR
	pNode : POINTER TO ListNode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pNode := __NEW(ListNode(Source := Value));
CreateNewNode := pNode^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitChangedEvent" Id="{07db516f-dae9-058f-01db-10115888c503}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitChangedEvent
VAR
	pCollectionChangedEvent : POINTER TO CollectionChangedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pCollectionChangedEvent := __NEW(CollectionChangedEvent(Target := THIS^));
eventEmitter.Emit('OnChanged', pCollectionChangedEvent^);
pCollectionChangedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmitDisposedEvent" Id="{455c6797-4b0e-08eb-3711-45e5b4b2d514}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE EmitDisposedEvent
VAR
	pCollectionDisposedEvent : POINTER TO CollectionDisposedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pCollectionDisposedEvent := __NEW(CollectionDisposedEvent(Target := THIS^));
eventEmitter.Emit('OnDisposed', pCollectionDisposedEvent^);
pCollectionDisposedEvent^.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{6cdb0602-1147-4386-94b4-4ce688efd37a}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
    RETURN;
END_IF

Clear();
buffer.DeleteBuffer();
EmitDisposedEvent();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetEnumerator" Id="{33f3535c-9060-0bb7-2654-48fe5e838bc3}">
      <Declaration><![CDATA[METHOD GetEnumerator : I_ForwardEnumerator
VAR
	pEnumerator : POINTER TO ListForwardEnumerator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pEnumerator := __NEW(ListForwardEnumerator(Parent := THIS^));
GetEnumerator := pEnumerator^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetIndexOf" Id="{dc118dd1-c0b6-034f-24ba-95e61f11b501}">
      <Declaration><![CDATA[METHOD PUBLIC GetIndexOf : DINT
VAR_INPUT
	Item : ANY;
END_VAR
VAR
	node : I_ListNode;
	i : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetIndexOf := -1;

IF IsEmpty THEN
	RETURN;
END_IF

FOR i := 0 TO itemCount - 1 DO
	node := THIS^.GetItemAtIndex(i);
	
	IF node.Equals(Item) THEN
		GetIndexOf := i;
		RETURN;
	END_IF
END_FOR ]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetItemAtIndex" Id="{9210c71f-ddfe-0994-239a-64e55a050468}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE GetItemAtIndex : I_ListNode
VAR_INPUT
	Index : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsNotValidIndex(Index) THEN
	RETURN;
END_IF

IF IsBufferPointerValid THEN
	GetItemAtIndex := pArrayOfListNodes[Index];
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Grow" Id="{6700e470-a7f5-065f-3e9c-b2b1971a269b}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE Grow : BOOL
VAR
	node : I_ListNode;
	
	nodeSize: UINT;
	creationSize: UDINT;
	bufferTemp: PVOID;
END_VAR
VAR CONSTANT
    INITIAL_CAPACITY : DINT := 4;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF arrayCapacity = 0 THEN
	arrayCapacity := INITIAL_CAPACITY;
ELSE
	arrayCapacity := arrayCapacity * 2;
END_IF

nodeSize := SIZEOF(node);
creationSize := DINT_TO_UDINT(arrayCapacity) * nodeSize;
bufferTemp := buffer.pBuffer;

buffer.CreateBuffer(nSize := 512, bReset := TRUE);
bufferTemp := buffer.pBuffer;

IF buffer.bAvailable THEN
	IF NOT buffer.Resize(nSize := DINT_TO_UDINT(arrayCapacity) * SIZEOF(node), bPreserve := TRUE, bReset := FALSE) THEN
		RETURN;
	END_IF
ELSE
	IF NOT buffer.CreateBuffer(nSize := DINT_TO_UDINT(arrayCapacity) * SIZEOF(node), bReset := TRUE) THEN
		RETURN;
	END_IF
END_IF

IF buffer.bAvailable THEN
	pArrayOfListNodes := buffer.pBuffer;
	
	IF IsBufferPointerValid THEN
		Grow := TRUE;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsBufferPointerValid" Id="{c85d5243-ca76-0cae-1756-e816eaa53fce}" FolderPath="Private\">
      <Declaration><![CDATA[PROPERTY PRIVATE IsBufferPointerValid : BOOL]]></Declaration>
      <Get Name="Get" Id="{f969aebc-585e-008c-1add-9a77107c12ce}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsBufferPointerValid := pArrayOfListNodes <> 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsEmpty" Id="{87812e48-ad67-0341-2e4d-fc762e7f9919}">
      <Declaration><![CDATA[PROPERTY IsEmpty : BOOL]]></Declaration>
      <Get Name="Get" Id="{64b0b815-1be4-0680-2d8a-443ce4efe6ff}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsEmpty := itemCount = 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="IsNotValidIndex" Id="{a67da9f5-7b4c-0476-01e3-66f2097aa25e}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE IsNotValidIndex : BOOL
VAR_INPUT
	Index : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsNotValidIndex := NOT IsValidIndex(Index);]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsValidIndex" Id="{9dcdb3cb-a411-01ce-1b09-b83ff69adce7}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE IsValidIndex : BOOL
VAR_INPUT
	Index : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index < 0 THEN
	RETURN;
END_IF

IF Index >= itemCount THEN
	RETURN;
END_IF

IsValidIndex := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="OffEvent" Id="{a01199ac-d5fc-0925-00a7-243774d588f8}">
      <Declaration><![CDATA[METHOD PUBLIC OffEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OffEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnceEvent" Id="{5407b8bd-51a5-0163-1490-8cae09761fe1}">
      <Declaration><![CDATA[METHOD PUBLIC OnceEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnceEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnEvent" Id="{0f8287c6-b582-0862-3bec-92aeb6d87fff}">
      <Declaration><![CDATA[METHOD PUBLIC OnEvent
VAR_INPUT
	EventName : T_MaxString;
	EventHandler : I_EventHandler;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[eventEmitter.OnEvent(EventName, EventHandler);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAllNodes" Id="{d4760963-3c04-0996-04f1-ecd731e6438f}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE RemoveAllNodes
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO itemCount - 1 DO
	IF pArrayOfListNodes[i] <> 0 THEN
		pArrayOfListNodes[i].Dispose();
	END_IF
END_FOR

itemCount := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TrimExcess" Id="{a0bb458a-9963-00ae-3598-30f10070a5f2}">
      <Declaration><![CDATA[METHOD PUBLIC TrimExcess
VAR
	node : I_ListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF arrayCapacity = 0 THEN
	RETURN;
END_IF

IF arrayCapacity = itemCount THEN
	RETURN;
END_IF

arrayCapacity := itemCount;
IF buffer.Resize(nSize := DINT_TO_UDINT(arrayCapacity) * SIZEOF(node), bPreserve := TRUE, bReset := FALSE) THEN
	pArrayOfListNodes := buffer.pBuffer;
ELSE
	pArrayOfListNodes := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryCopyTo" Id="{c536d20a-b3b6-0d1b-0567-0b1546a7f274}">
      <Declaration><![CDATA[METHOD PUBLIC TryCopyTo : BOOL
VAR_INPUT
	Destination	: ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryCopyTo := TryCopyToLocation(Destination.pValue, DINT_TO_UDINT(Destination.diSize));]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryCopyToLocation" Id="{e93286db-88a3-06ba-15c4-71b3dfd37667}">
      <Declaration><![CDATA[METHOD PUBLIC TryCopyToLocation : BOOL
VAR_INPUT
	DestinationAddress : PVOID;
	DestinationSize : UDINT;
END_VAR
VAR
	i : DINT;
	requiredSize : UDINT;
	current : I_ListNode;
	pCurrent : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsEmpty THEN
    RETURN;
END_IF

//Compute required size
FOR i := 0 TO Count - 1 DO
    current := GetItemAtIndex(i);
    requiredSize := requiredSize + current.DataSize;
END_FOR

//If destination size is to small abort
IF DestinationSize < requiredSize THEN
    RETURN;
END_IF

pCurrent := DestinationAddress;

FOR i := 0 TO Count - 1 DO
    current := GetItemAtIndex(i);
    current.TryGetTo(pCurrent, current.DataSize);
    pCurrent := pCurrent + current.DataSize;
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetByIndex" Id="{95f84800-67d8-02ae-2d22-a62e63916508}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetByIndex : BOOL
VAR_INPUT
	Index : DINT;
	Destination : ANY;
END_VAR
VAR
	node : I_ListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[node := GetItemAtIndex(Index);

IF node = 0 THEN
	RETURN;
END_IF

TryGetByIndex := node.TryGet(Destination);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetToByIndex" Id="{fd5e1a4f-52c2-0eb3-11af-16764c7f07dc}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetToByIndex : BOOL
VAR_INPUT
	Index : DINT;
	DestinationAddress : PVOID;
	DestinationSize : UDINT;
END_VAR
VAR
	node : I_ListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[node := GetItemAtIndex(Index);

IF node = 0 THEN
	RETURN;
END_IF

TryGetToByIndex := node.TryGetTo(DestinationAddress, DestinationSize);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryInsert" Id="{877a3cea-074c-038e-11cb-9c8b21d6df5c}">
      <Declaration><![CDATA[METHOD TryInsert : BOOL
VAR_INPUT
	Index : DINT;
	Item : ANY;
END_VAR
VAR
	node : I_ListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsNotValidIndex(Index) THEN
	RETURN;
END_IF

node := CreateNewNode(Item);
IF AddNodeAt(Index, node) THEN
	EmitChangedEvent();
	TryInsert := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryRemoveAt" Id="{928f75dc-5dca-413d-afc2-dde5bd945a34}">
      <Declaration><![CDATA[METHOD PUBLIC TryRemoveAt : BOOL;
VAR_INPUT
	Index : DINT;
END_VAR
VAR
	i : DINT;
	node : I_ListNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF IsNotValidIndex(Index) THEN
	RETURN;
END_IF

IF IsBufferPointerValid THEN
	node := GetItemAtIndex(Index);
	node.Dispose();
	
	FOR i := Index + 1 TO itemCount - 1 DO
		pArrayOfListNodes[i - 1] := pArrayOfListNodes[i];
		pArrayOfListNodes[i] := 0;
	END_FOR
	
	itemCount := itemCount - 1;
	EmitChangedEvent();
	TryRemoveAt := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryRemoveItem" Id="{8d092a76-cd3c-03e5-2adb-d980c30aa512}">
      <Declaration><![CDATA[METHOD TryRemoveItem : BOOL
VAR_INPUT
    Item : ANY;
END_VAR
VAR
    index : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[index := GetIndexOf(Item);

IF index = -1 THEN
	RETURN;
END_IF

TryRemoveItem := TryRemoveAt(index);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="List">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.AddItem">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="List.AddNodeAt">
      <LineId Id="33" Count="17" />
      <LineId Id="54" Count="8" />
      <LineId Id="53" Count="0" />
      <LineId Id="52" Count="0" />
    </LineIds>
    <LineIds Name="List.AddNodeLast">
      <LineId Id="3" Count="1" />
      <LineId Id="8" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="List.Capacity.Get">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="List.Clear">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.Contains">
      <LineId Id="3" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.Count.Get">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="List.CreateNewNode">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.EmitChangedEvent">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.EmitDisposedEvent">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.FB_exit">
      <LineId Id="3" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.GetEnumerator">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.GetIndexOf">
      <LineId Id="3" Count="12" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.GetItemAtIndex">
      <LineId Id="11" Count="5" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="List.Grow">
      <LineId Id="3" Count="4" />
      <LineId Id="35" Count="6" />
      <LineId Id="8" Count="2" />
      <LineId Id="17" Count="1" />
      <LineId Id="11" Count="1" />
      <LineId Id="19" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="List.IsBufferPointerValid.Get">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="List.IsEmpty.Get">
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="List.IsNotValidIndex">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.IsValidIndex">
      <LineId Id="3" Count="7" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.OffEvent">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.OnceEvent">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.OnEvent">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.RemoveAllNodes">
      <LineId Id="3" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.TrimExcess">
      <LineId Id="3" Count="8" />
      <LineId Id="2" Count="0" />
      <LineId Id="12" Count="3" />
    </LineIds>
    <LineIds Name="List.TryCopyTo">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.TryCopyToLocation">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.TryGetByIndex">
      <LineId Id="3" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.TryGetToByIndex">
      <LineId Id="3" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="List.TryInsert">
      <LineId Id="3" Count="6" />
      <LineId Id="2" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="List.TryRemoveAt">
      <LineId Id="3" Count="3" />
      <LineId Id="2" Count="0" />
      <LineId Id="9" Count="9" />
      <LineId Id="7" Count="1" />
    </LineIds>
    <LineIds Name="List.TryRemoveItem">
      <LineId Id="3" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>